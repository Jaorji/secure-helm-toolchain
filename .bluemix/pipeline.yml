---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  properties:
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text  
  jobs:
  - name: Build image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # use build script from app source control
      SCRIPT_NAME="build.sh"
      SCRIPT_FOLDER="scripts"
      BASE_URL="https://raw.githubusercontent.com/open-toolchain/hello-helm/master"
      if [ ! -f "${SCRIPT_FOLDER}/${SCRIPT_NAME}" ]; then
        echo -e "No script found at ./${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        echo "Defaulting to generic script from: ${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        mkdir -p ${SCRIPT_FOLDER}
        wget "${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}" --output-document "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        if [ ! -f "${SCRIPT_FOLDER}/${SCRIPT_NAME}" ]; then
          echo -e "Failed to retrieve generic script from: ${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        fi
        # cat "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
      fi
      source "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Build image
  triggers:
  - type: stage
  properties:
  - name: FULL_REPOSITORY_NAME
    value: ''
    type: text  
  jobs:
  - name: Vulnerability Advisor
    type: tester
    extension_id: ibm.devops.services.pipeline.crawler.tester
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    WAIT_TIME: '5'
- name: STAGING
  inputs:
  - type: job
    stage: BUILD
    job: Build image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${STAGING_CLUSTER_NAMESPACE}
    type: text
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text      
  jobs:
  - name: Deploy Helm Chart
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${STAGING_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # use deploy script from app source control
      SCRIPT_NAME="deploy.sh"
      SCRIPT_FOLDER="scripts"
      BASE_URL="https://raw.githubusercontent.com/open-toolchain/hello-helm/master"
      if [ ! -f "${SCRIPT_FOLDER}/${SCRIPT_NAME}" ]; then
        echo -e "No script found at ./${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        echo "Defaulting to generic script from: ${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        mkdir -p ${SCRIPT_FOLDER}
        wget "${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}" --output-document "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        if [ ! -f "${SCRIPT_FOLDER}/${SCRIPT_NAME}" ]; then
          echo -e "Failed to retrieve generic script from: ${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        fi
        # cat "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
      fi
      source "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
- name: PROD
  inputs:
  - type: job
    stage: BUILD
    job: Build image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: CHART_NAME
    value: ${CHART_NAME}
    type: text        
  jobs:
  - name: Deploy Helm Chart
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # use deploy script from app source control
      SCRIPT_NAME="deploy.sh"
      SCRIPT_FOLDER="scripts"
      BASE_URL="https://raw.githubusercontent.com/open-toolchain/hello-helm/master"
      if [ ! -f "${SCRIPT_FOLDER}/${SCRIPT_NAME}" ]; then
        echo -e "No script found at ./${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        echo "Defaulting to generic script from: ${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        mkdir -p ${SCRIPT_FOLDER}
        wget "${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}" --output-document "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        if [ ! -f "${SCRIPT_FOLDER}/${SCRIPT_NAME}" ]; then
          echo -e "Failed to retrieve generic script from: ${BASE_URL}/${SCRIPT_FOLDER}/${SCRIPT_NAME}"
        fi
        # cat "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
      fi
      source "${SCRIPT_FOLDER}/${SCRIPT_NAME}"
