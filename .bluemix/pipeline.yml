---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  jobs:
  - name: Container build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    IMAGE_NAME: ${CF_APP_NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |
      #!/bin/bash
      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.  
      echo -e "${label_color}Starting build script${no_color}"
      
      # The IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix 
      #####################
      # Run unit tests    #
      #####################
      echo -e "${label_color}No unit tests cases have been checked in ${no_color}"
      
      ######################################
      # Build Container via Dockerfile     #
      ######################################
      
      # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}   
      
      # Possible adding retries to build the image
      if [ -f Dockerfile ]; then 
          echo -e "${label_color}BUILDING ${FULL_REPOSITORY_NAME} ${no_color}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then 
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else 
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi 
      
          if [ $RESULT -ne 0 ]; then
              echo -e "${red}Error building image ${no_color}" | tee -a "$ERROR_LOG_FILE"
              echo "Build command: ice ${BUILD_COMMAND}"
              ice info 
              ice images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed"
              exit 1
          else
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
              echo -e "${green}Container build of ${FULL_REPOSITORY_NAME} was successful ${no_color}"
          fi  
      else 
          echo -e "${red}Dockerfile not found at the repository root${no_color}"
          exit 1
      fi  

      ######################################################################################
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
      ######################################################################################
      # IMAGE_NAME from build.properties is used by Vulnerability Advisor job to reference the image qualified location in registry
      echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
      # RELEASE_NAME from build.properties is used in Helm Chart deployment to set the release name
      echo "RELEASE_NAME=${IMAGE_NAME}" >> $ARCHIVE_DIR/build.properties
      if [ -f ./chart/hello/values.yaml ]; then
          #Update Helm chart values.yml with image name and tag
          echo "UPDATING CHART VALUES:"
          sed -i "s~^\([[:blank:]]*\)repository:.*$~\1repository: ${REGISTRY_URL}/${IMAGE_NAME}~" ./chart/hello/values.yaml
          sed -i "s~^\([[:blank:]]*\)tag:.*$~\1tag: ${APPLICATION_VERSION}~" ./chart/hello/values.yaml
          cat ./chart/hello/values.yaml
          cp -r ./chart/ $ARCHIVE_DIR/
      else 
          echo -e "${red}Helm chart values for Kubernetes deployment (/chart/hello/values.yaml) not found.${no_color}"
          exit 1
      fi     
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Container build
  triggers:
  - type: stage
  properties:
  - name: FULL_REPOSITORY_NAME
    value: ''
    type: text  
  jobs:
  - name: Vulnerability Advisor
    type: tester
    extension_id: ibm.devops.services.pipeline.crawler.tester
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    WAIT_TIME: '5'
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Container build
  properties:
  - name: buildprops
    value: build.properties
    type: file  
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text  
    jobs:
  - name: Deploy Helm Chart
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x

      #View build properties
      cat build.properties

      #Check cluster availability
      ip_addr=$(bx cs workers $PIPELINE_KUBERNETES_CLUSTER_NAME | grep normal | awk '{ print $2 }')
      if [ -z $ip_addr ]; then
        echo "$PIPELINE_KUBERNETES_CLUSTER_NAME not created or workers not ready"
        exit 1
      fi

      #Check cluster target namespace 
      if ! kubectl get namespace $CLUSTER_NAMESPACE; then
        kubectl create namespace $CLUSTER_NAMESPACE
      fi
      # Grant access to private image registry from namespace $CLUSTER_NAMESPACE
      if ! kubectl get secret bluemix-default-secret --namespace $CLUSTER_NAMESPACE; then
        # copy the existing default secret into the new namespace
        kubectl get secret bluemix-default-secret -o yaml |  sed "s~^\([[:blank:]]*\)namespace:.*$~\1namespace: ${CLUSTER_NAMESPACE}~" | kubectl -n $CLUSTER_NAMESPACE create -f -
        # enable default serviceaccount to use the pull secret
        kubectl patch -n $CLUSTER_NAMESPACE serviceaccount/default -p '{"imagePullSecrets":[{"name":"bluemix-default-secret"}]}'
        echo "Namespace $CLUSTER_NAMESPACE is now authorized to pull from the private image registry"
      fi

      # Check Helm/Tiller
      echo "CHECKING TILLER (Helm's server component)"
      helm init --upgrade
      while true; do
        tiller_deployed=$(kubectl --namespace=kube-system get pods | grep tiller | grep Running | grep 1/1 )
        if [[ "${tiller_deployed}" != "" ]]; then
          echo "Tiller ready."
          break; 
        fi
        echo "Waiting for Tiller to be ready."
        sleep 1
      done
      helm version

      echo "CHECKING CHART (lint) "
      helm lint ${RELEASE_NAME} ./chart/hello

      echo "DRY RUN DEPLOYING into: $PIPELINE_KUBERNETES_CLUSTER_NAME/$CLUSTER_NAMESPACE."
      helm upgrade ${RELEASE_NAME} ./chart/hello --namespace $CLUSTER_NAMESPACE --install --debug --dry-run

      echo "DEPLOYING into: $PIPELINE_KUBERNETES_CLUSTER_NAME/$CLUSTER_NAMESPACE."
      helm upgrade ${RELEASE_NAME} ./chart/hello --namespace $CLUSTER_NAMESPACE --install

      echo ""
      echo "DEPLOYED SERVICE:"
      kubectl describe services ${RELEASE_NAME}-hello --namespace $CLUSTER_NAMESPACE

      echo ""
      echo "DEPLOYED PODS:"
      kubectl describe pods --selector app=hello --namespace $CLUSTER_NAMESPACE

      port=$(kubectl get services | grep ${RELEASE_NAME}-hello --namespace $CLUSTER_NAMESPACE | sed 's/.*:\([0-9]*\).*/\1/g')
      echo ""
      echo "VIEW THE APPLICATION AT: http://$ip_addr:$port"